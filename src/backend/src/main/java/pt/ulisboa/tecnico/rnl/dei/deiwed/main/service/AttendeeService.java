package pt.ulisboa.tecnico.rnl.dei.deiwed.main.service;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import pt.ulisboa.tecnico.rnl.dei.deiwed.exceptions.DeiwedException;
import pt.ulisboa.tecnico.rnl.dei.deiwed.exceptions.ErrorMessage;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.dto.AttendeeDto;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.entity.Attendee;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.repository.AttendeeRepository;

import pt.ulisboa.tecnico.rnl.dei.deiwed.main.dto.SessionDto;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.entity.Session;
import pt.ulisboa.tecnico.rnl.dei.deiwed.main.repository.SessionRepository;

@Service
@Transactional
public class AttendeeService {
	@Autowired
	private AttendeeRepository attendeeRepository;

	@Autowired
	private SessionRepository sessionRepository;

	private Attendee fetchAttendeeOrThrow(long id) {
		return attendeeRepository.findById(id)
				.orElseThrow(() -> new DeiwedException(ErrorMessage.NO_SUCH_ATTENDEE, Long.toString(id)));
	}

	private Session fetchSessionOrThrow(long id) {
		return sessionRepository.findById(id)
				.orElseThrow(() -> new DeiwedException(ErrorMessage.NO_SUCH_SESSION, Long.toString(id)));
	}

	private AttendeeDto updateOrCreateAttendee(Long id, AttendeeDto attendeeDto) {
		Attendee attendee = new Attendee(attendeeDto);
		attendee.setId(id); 
		return new AttendeeDto(attendeeRepository.save(attendee));
	}

	public List<AttendeeDto> getAllAttendees() {
		return attendeeRepository.findAll().stream()
				.map(AttendeeDto::new)
				.collect(Collectors.toList());
	}

	public AttendeeDto getAttendee(long id) {
		return new AttendeeDto(fetchAttendeeOrThrow(id));
	}

	public List<SessionDto> getAttendeeSessions(long id) {
		Attendee attendee = fetchAttendeeOrThrow(id);

		return attendee.getSessions().stream()
			.map(SessionDto::new)
			.collect(Collectors.toList());
	}

	public List<SessionDto> getNotAttendeeSessions(long id) {
		Attendee attendee = fetchAttendeeOrThrow(id);

		List<Session> result = sessionRepository.findAll().stream()
    		.filter(s -> !attendee.getSessions().contains(s)).collect(Collectors.toList());

		return result.stream()
			.map(SessionDto::new)
			.collect(Collectors.toList());
	}

	public void addAttendeeToSession(long attendeeId, long sessionId) {
		Session session = fetchSessionOrThrow(sessionId);
		Attendee attendee = fetchAttendeeOrThrow(attendeeId);

		if (attendee.getSessions().contains(session)){
			new DeiwedException(ErrorMessage.ATTENDEE_ALREADY_ENROLLED_SESSION, Long.toString(attendeeId), Long.toString(sessionId));
		}

		attendee.addSession(session);
	}

	public void removeAttendeeFromSession(long attendeeId, long sessionId) {
		Session session = fetchSessionOrThrow(sessionId);
		Attendee attendee = fetchAttendeeOrThrow(attendeeId);

		if (!attendee.getSessions().contains(session)){
			new DeiwedException(ErrorMessage.ATTENDEE_NOT_IN_SESSION, Long.toString(attendeeId), Long.toString(sessionId));
		}
		
		attendee.removeSession(session);
	}

	public AttendeeDto createAttendee(AttendeeDto attendeeDto) {
		return updateOrCreateAttendee(null, attendeeDto); //null, to ensure that the id is generated by the database
	}

	public AttendeeDto updateAttendee(long id, AttendeeDto attendeeDto) {
		fetchAttendeeOrThrow(id); // ensure exists

		return updateOrCreateAttendee(id, attendeeDto);
	}

	public void deleteAttendee(long id) {
		Attendee att = fetchAttendeeOrThrow(id); // ensure exists
		att.remove();

		attendeeRepository.deleteById(id);
	}
}
